extends Node2D

# Node references
@onready var turn_label = $TurnLabel
@onready var dice = $Dice
@onready var dice_animation = $DiceAnimation
@onready var dice_face = $DiceFace
@onready var game_over = $GameOver
@onready var timer = $Timer
@onready var dice_button = $Dice_Button
@onready var is_host_label = $isHost
@onready var diceLabel = $DiceLabel
@onready var path_walk = $PathWalk  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Node ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô Scene
@onready var path_follow = $PathWalk/PathFollow2D  # ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô PathFollow2D
@onready var player = $PathWalk/PathFollow2D/Player1



const TOTAL_CELLS = 100
var curve: Curve2D

# Player paths
var player_nodes = [
	$PathWalk/Player1,
	$PathWalk/Player2,
	$PathWalk/Player3,
	$PathWalk/Player4
]

func _ready():
	if not multiplayer.has_multiplayer_peer():
		return_to_lobby()
		return
	
	var my_name = Global.my_name
	if multiplayer.is_server():
		is_host_label.text = "üñ•Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Host " + my_name
	else:
		is_host_label.text = "üéÆ ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Client " + my_name
	
	if Global.peer:
		multiplayer.multiplayer_peer = Global.peer
		
	# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏õ‡∏∏‡πà‡∏° dice_button
	dice_button.pressed.connect(_on_dice_pressed)
	# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Host
	await get_tree().create_timer(1.0).timeout
	if multiplayer.multiplayer_peer.get_connection_status() == MultiplayerPeer.CONNECTION_DISCONNECTED:
		return_to_lobby()
	
	# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Path2D ‡∏°‡∏µ Curve ‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
	if path_walk.curve == null:
		push_error("Path2D ‡πÑ‡∏°‡πà‡∏°‡∏µ Curve ‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î!")
		return
	
	print("‡∏à‡πç‡∏≤‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: ", path_walk.curve.get_point_count())
   # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PathFollow2D
	path_follow.progress_ratio = 0
	path_follow.rotation = false

	
func move_player(steps: int) -> void:

	var target_cell = min(current_cell + steps, TOTAL_CELLS)
	var point_count = path_walk.curve.get_point_count()

	# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ target_cell ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡πÉ‡∏ô curve
	if target_cell >= point_count:
		print("‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î curve!")
		target_cell = point_count - 1  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á curve

	for i in range(current_cell + 1, target_cell + 1):
		var point_position = path_walk.curve.get_point_position(i)
		var tween := create_tween()
		tween.tween_property(path_follow, "position", point_position, 0.2)
		current_cell = target_cell

	print("‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ", current_cell)
	


func return_to_lobby():
	get_tree().change_scene_to_file("res://Scene/lobby.tscn")

	# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 	Dice
func _on_dice_pressed():
	#if multiplayer.get_unique_id() != Global.get_current_turn_id():
		#return # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
		#
		# ‡πÄ‡∏•‡πà‡∏ô animation ‡∏ó‡∏≠‡∏¢‡∏•‡∏π‡∏Å‡πÄ‡∏ï‡πã‡∏≤
	$DiceFace.hide()
	$DiceAnimation.show()
	$DiceAnimation.play("DiceRolling")
	
	await $DiceAnimation.animation_finished
	var my_name = Global.my_name
	
	# ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤ 1-6
	var roll = randi_range(1, 6)
	diceLabel.text = my_name + "üé≤ ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ : " + str(roll)
	print(my_name, "üé≤ ‡∏ó‡∏≠‡∏¢‡πÑ‡∏î‡πâ : " , roll)

	$DiceFace.frame = roll - 1
	$DiceFace.show()
	$DiceAnimation.hide()
	move_player(roll)
	# ‡∏™‡πà‡∏á ID ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏ó‡∏≠‡∏¢‡πÑ‡∏õ‡πÉ‡∏´‡πâ Host
	send_roll_to_host.rpc_id(1, roll)  # id 1 ‡∏Ñ‡∏∑‡∏≠ host


#Host
# Dictionary ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
var players_data = {}  # {player_id: {"name": "‡∏ä‡∏∑‡πà‡∏≠", "position": ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, "node": PathFollow2D}}

@rpc("any_peer", "reliable")
func send_roll_to_host(player_id: int, rolled_number: int):
	if not multiplayer.is_server():
		return
	
	print("üì® ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ID:", player_id, " ‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πâ‡∏°:", rolled_number)
	move_player(rolled_number)
	# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	#if player_id != Global.get_current_turn_id():
		#print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏µ‡πâ")
		#return
	
	# 1. ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	#var current_pos = players_data[player_id]["position"]
	
	# 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
	#var new_pos = current_pos + rolled_number
	
	# 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
	#const BOARD_MAX = 100  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
	#if new_pos > BOARD_MAX:
		#new_pos = BOARD_MAX
	
	# 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏π
	#new_pos = check_snakes_and_ladders(new_pos)
	
	# 5. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	#players_data[player_id]["position"] = new_pos
	
	# 6. ‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà (‡∏ó‡∏±‡πâ‡∏á Host ‡πÅ‡∏•‡∏∞ Client)
	#move_player_to_position.rpc(player_id, current_pos, new_pos)
	#
	## 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
	#if new_pos >= BOARD_MAX:
		#announce_winner.rpc(player_id)
	#else:
		## 8. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
		#change_turn.rpc()


@rpc("reliable")
func move_player_to_position(player_id: int, start_pos: int, end_pos: int):
	var path_follow = players_data[player_id]["node"]
	var curve = $Path2D.curve
	var point_count = curve.get_point_count()
	
	# ‡∏™‡∏£‡πâ‡∏≤‡∏á Tween ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
	var tween = create_tween()
	
	# ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á
	for pos in range(start_pos + 1, end_pos + 1):
		var progress = float(pos) / (point_count - 1)
		tween.tween_property(path_follow, "progress_ratio", progress, 0.2)
		tween.tween_interval(0.05)  # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á
	
	# ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
	tween.tween_callback(check_tile_effect.bind(player_id, end_pos))

func check_tile_effect(player_id: int, position: int):
	# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á (‡∏ö‡∏±‡∏ô‡πÑ‡∏î/‡∏á‡∏π)
	var final_pos = check_snakes_and_ladders(position)
	
	if final_pos != position:
		# ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏π
		players_data[player_id]["position"] = final_pos
		move_player_to_position.rpc(player_id, position, final_pos)


func check_snakes_and_ladders(position: int) -> int:
	var special_tiles = {
		3: 22, 5: 8, 20: 11, 17: 4,
		# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÅ‡∏•‡∏∞‡∏á‡∏π‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
	}
	return special_tiles.get(position, position)




@rpc("any_peer", "reliable")
func request_player_list():
	var sender_id = multiplayer.get_remote_sender_id()
	# Host ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Client ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠
	send_player_list.rpc_id(sender_id, Global.players)

# Host ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Client
@rpc("authority", "reliable")
func send_player_list(players_data: Dictionary):
	print("Received player list from host:")
	for id in players_data:
		print("Player ID: ", id, " Name: ", players_data[id])


@rpc("authority", "call_local")
func start_game():
	# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö turn ‡∏ï‡∏≤‡∏° ID
	Global.turn_order = Global.players.keys()
	Global.turn_order.sort()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° id ‡πÄ‡∏•‡∏¢

	Global.current_turn_index = 0
	sync_turn_to_all.rpc(Global.get_current_turn_id())

@rpc("authority", "reliable")
func next_turn():
	Global.advance_turn()
	sync_turn_to_all.rpc(Global.get_current_turn_id())

@rpc("any_peer", "call_local", "reliable")
func sync_turn_to_all(current_turn_id: int):
	var is_my_turn = (multiplayer.get_unique_id() == current_turn_id)
	print("üéØ My turn:", is_my_turn)
	turn_label.text = "üé≤ ‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!" if is_my_turn else "‚è≥ ‡∏£‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô..."
